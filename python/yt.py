# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _yt
else:
    import _yt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Channel_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_yt.Channel_t_id_get, _yt.Channel_t_id_set)
    name = property(_yt.Channel_t_name_get, _yt.Channel_t_name_set)
    sub_count = property(_yt.Channel_t_sub_count_get, _yt.Channel_t_sub_count_set)
    video_count = property(_yt.Channel_t_video_count_get, _yt.Channel_t_video_count_set)

    def __init__(self):
        _yt.Channel_t_swiginit(self, _yt.new_Channel_t())
    __swig_destroy__ = _yt.delete_Channel_t

# Register Channel_t in _yt:
_yt.Channel_t_swigregister(Channel_t)

class Channels_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arry = property(_yt.Channels_t_arry_get, _yt.Channels_t_arry_set)
    length = property(_yt.Channels_t_length_get, _yt.Channels_t_length_set)

    def __init__(self):
        _yt.Channels_t_swiginit(self, _yt.new_Channels_t())
    __swig_destroy__ = _yt.delete_Channels_t

# Register Channels_t in _yt:
_yt.Channels_t_swigregister(Channels_t)


def channel_new(id):
    return _yt.channel_new(id)

def vid_get_thumbnail(thumbnails):
    return _yt.vid_get_thumbnail(thumbnails)

def channel_new_from_name(name, conf):
    return _yt.channel_new_from_name(name, conf)

def channel_search(conf, query, page, callback, data):
    return _yt.channel_search(conf, query, page, callback, data)

def channel_search_list(conf, query, page):
    return _yt.channel_search_list(conf, query, page)

def channel_name(channel, conf):
    return _yt.channel_name(channel, conf)

def channel_get_vids(channel, conf, callback, data):
    return _yt.channel_get_vids(channel, conf, callback, data)

def channel_get_vids_list(channel, conf):
    return _yt.channel_get_vids_list(channel, conf)

def channel_free(channel):
    return _yt.channel_free(channel)
class Config_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fname = property(_yt.Config_t_fname_get, _yt.Config_t_fname_set)
    quality = property(_yt.Config_t_quality_get, _yt.Config_t_quality_set)
    subs = property(_yt.Config_t_subs_get, _yt.Config_t_subs_set)
    invidious_inst = property(_yt.Config_t_invidious_inst_get, _yt.Config_t_invidious_inst_set)
    use_threading = property(_yt.Config_t_use_threading_get, _yt.Config_t_use_threading_set)
    use_proxy = property(_yt.Config_t_use_proxy_get, _yt.Config_t_use_proxy_set)
    proxy_url = property(_yt.Config_t_proxy_url_get, _yt.Config_t_proxy_url_set)

    def __init__(self):
        _yt.Config_t_swiginit(self, _yt.new_Config_t())
    __swig_destroy__ = _yt.delete_Config_t

# Register Config_t in _yt:
_yt.Config_t_swigregister(Config_t)


def config_new(fname, use_proxy):
    return _yt.config_new(fname, use_proxy)

def config_subs_add(conf, channel):
    return _yt.config_subs_add(conf, channel)

def config_subs_rm(conf, channel):
    return _yt.config_subs_rm(conf, channel)

def config_save(conf):
    return _yt.config_save(conf)

def config_get_vids_list(conf):
    return _yt.config_get_vids_list(conf)

def config_get_vids(conf, callback, data):
    return _yt.config_get_vids(conf, callback, data)

def video_get_playable(video, conf):
    return _yt.video_get_playable(video, conf)

def config_free(conf):
    return _yt.config_free(conf)

def config_video_search(conf, query, page, callback, data):
    return _yt.config_video_search(conf, query, page, callback, data)

def config_video_search_list(conf, query, page):
    return _yt.config_video_search_list(conf, query, page)
class Video_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_yt.Video_t_id_get, _yt.Video_t_id_set)
    title = property(_yt.Video_t_title_get, _yt.Video_t_title_set)
    channel_name = property(_yt.Video_t_channel_name_get, _yt.Video_t_channel_name_set)
    channel_id = property(_yt.Video_t_channel_id_get, _yt.Video_t_channel_id_set)
    thumbnail = property(_yt.Video_t_thumbnail_get, _yt.Video_t_thumbnail_set)
    published = property(_yt.Video_t_published_get, _yt.Video_t_published_set)

    def __init__(self):
        _yt.Video_t_swiginit(self, _yt.new_Video_t())
    __swig_destroy__ = _yt.delete_Video_t

# Register Video_t in _yt:
_yt.Video_t_swigregister(Video_t)


def video_new():
    return _yt.video_new()

def video_free(video):
    return _yt.video_free(video)

def net_get(url, use_proxy, proxy_url):
    return _yt.net_get(url, use_proxy, proxy_url)

def net_set_req_func(func):
    return _yt.net_set_req_func(func)


