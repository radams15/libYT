# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _yt
else:
    import _yt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Channel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_yt.Channel_id_get, _yt.Channel_id_set)
    name = property(_yt.Channel_name_get, _yt.Channel_name_set)

    def __init__(self):
        _yt.Channel_swiginit(self, _yt.new_Channel())
    __swig_destroy__ = _yt.delete_Channel

# Register Channel in _yt:
_yt.Channel_swigregister(Channel)


def channel_new(id):
    return _yt.channel_new(id)

def channel_name(channel, conf):
    return _yt.channel_name(channel, conf)

def channel_get_vids(channel, conf, callback, data):
    return _yt.channel_get_vids(channel, conf, callback, data)

def channel_free(channel):
    return _yt.channel_free(channel)
class Subs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    array = property(_yt.Subs_array_get, _yt.Subs_array_set)
    length = property(_yt.Subs_length_get, _yt.Subs_length_set)

    def __init__(self):
        _yt.Subs_swiginit(self, _yt.new_Subs())
    __swig_destroy__ = _yt.delete_Subs

# Register Subs in _yt:
_yt.Subs_swigregister(Subs)

class Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file = property(_yt.Config_file_get, _yt.Config_file_set)
    quality = property(_yt.Config_quality_get, _yt.Config_quality_set)
    subs = property(_yt.Config_subs_get, _yt.Config_subs_set)
    invidious_inst = property(_yt.Config_invidious_inst_get, _yt.Config_invidious_inst_set)
    use_threading = property(_yt.Config_use_threading_get, _yt.Config_use_threading_set)

    def __init__(self):
        _yt.Config_swiginit(self, _yt.new_Config())
    __swig_destroy__ = _yt.delete_Config

# Register Config in _yt:
_yt.Config_swigregister(Config)

class Videos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    array = property(_yt.Videos_array_get, _yt.Videos_array_set)
    length = property(_yt.Videos_length_get, _yt.Videos_length_set)

    def __init__(self):
        _yt.Videos_swiginit(self, _yt.new_Videos())
    __swig_destroy__ = _yt.delete_Videos

# Register Videos in _yt:
_yt.Videos_swigregister(Videos)


def config_new(file):
    return _yt.config_new(file)

def config_subs_add(conf, channel):
    return _yt.config_subs_add(conf, channel)

def config_get_vids_list(conf):
    return _yt.config_get_vids_list(conf)

def videos_free(vids):
    return _yt.videos_free(vids)

def videos_get(vids, index):
    return _yt.videos_get(vids, index)

def config_get_vids(conf, callback, data):
    return _yt.config_get_vids(conf, callback, data)

def config_free(conf):
    return _yt.config_free(conf)
class Video(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_yt.Video_id_get, _yt.Video_id_set)
    title = property(_yt.Video_title_get, _yt.Video_title_set)
    channel_name = property(_yt.Video_channel_name_get, _yt.Video_channel_name_set)
    channel_id = property(_yt.Video_channel_id_get, _yt.Video_channel_id_set)
    published = property(_yt.Video_published_get, _yt.Video_published_set)

    def __init__(self):
        _yt.Video_swiginit(self, _yt.new_Video())
    __swig_destroy__ = _yt.delete_Video

# Register Video in _yt:
_yt.Video_swigregister(Video)


def video_new():
    return _yt.video_new()

def video_free(video):
    return _yt.video_free(video)

def video_get_playable(video, conf):
    return _yt.video_get_playable(video, conf)


